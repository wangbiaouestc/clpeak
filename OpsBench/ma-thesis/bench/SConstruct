# Build file for the bench project

includeDirectories = ['.', '/usr/local/include', '/usr/local/cuda/include']
libraryDirectories = ['/usr/local/cuda/lib64', '/usr/local/cuda/lib', '/usr/lib']

########################################################################################################

arch = ARGUMENTS.get('arch', '')

archFlag = '-arch='
if arch == '':
	archFlag += 'sm_20'
else:
	archFlag += arch

disableL1Flag = ''
disableL1Arg = ARGUMENTS.get('disablel1', '')
if not disableL1Arg == '':
	disableL1Flag = '-Xptxas -dlcm=cg'
	
compileTestsFlag = ARGUMENTS.get('test', '')

compileTests = False
if not compileTestsFlag == '':
	compileTests = True
	
########################################################################################################

def MapSource(env, source):
	if source[-3:] == ".cu":
		return env.Cuda(source)
	return source

########################################################################################################

env = Environment(CC = 'g++', CCFLAGS = '-std=c++0x -O3', CPPPATH = includeDirectories)
env['BUILD_ROOT'] = Dir('.')

env.Append(BUILDERS = {'Cuda': Builder(
	action='/usr/local/cuda/bin/nvcc ' + archFlag + ' ' + disableL1Flag + ' $SOURCE -c -o $TARGET -I.',
    suffix = '.o',
    src_suffix = '.cu'
), 'CuObjdump': Builder(
	action='/usr/local/cuda/bin/cuobjdump --dump-sass $SOURCE > kernels.sass',
	suffix = '.sass',
	src_suffix = '.o'
)})

sourceFiles = Split("""
bench.cpp
benchmarks/implementation/Benchmark.cpp
benchmarks/implementation/EmptyBenchmark.cpp
benchmarks/implementation/ClockBenchmark.cpp
benchmarks/implementation/CacheBenchmark.cpp
benchmarks/implementation/SharedMemoryBenchmark.cpp
benchmarks/implementation/InstructionBenchmark.cpp
benchmarks/implementation/TextureBenchmark.cpp
util/implementation/Util.cpp
util/implementation/Clustering.cpp
""")

cudaSourceFiles = Split("""
benchmarks/implementation/ClockBenchmarkKernels.cu
benchmarks/implementation/CacheBenchmarkKernels.cu
benchmarks/implementation/SharedMemoryBenchmarkKernels.cu
benchmarks/implementation/InstructionBenchmarkKernels.cu
benchmarks/implementation/TextureBenchmarkKernels.cu
""")

objects = env.Object(source = sourceFiles)
cudaObjects = [MapSource(env, src) for src in cudaSourceFiles]

#env.CuObjdump(cudaObjects)

env.Program(target = 'bench', source = objects + cudaObjects, LIBPATH=libraryDirectories, LIBS=['cudart'])

if compileTests:
	env.Append(CCFLAGS = ' -g')
	clusterTestSource = Split("""
	util/implementation/Clustering.cpp
	util/implementation/Util.cpp
	util/test/ClusterTest.cpp
	""")
	env.Program(target = 'util/test/ClusterTest', source = clusterTestSource, LIBPATH = libraryDirectories)
	
